name: Manual PyPI Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.2) - leave empty to use current version'
        required: false
        default: ''
      force:
        description: 'Force publish even if version already exists'
        required: false
        default: false
        type: boolean
      skip-tests:
        description: 'Skip running tests before publishing'
        required: false
        default: false
        type: boolean

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ github.event.inputs.version }}
      force: ${{ github.event.inputs.force }}
      skip-tests: ${{ github.event.inputs.skip-tests }}
    steps:
    - name: Validate inputs
      run: |
        echo "Version: ${{ github.event.inputs.version }}"
        echo "Force: ${{ github.event.inputs.force }}"
        echo "Skip tests: ${{ github.event.inputs.skip-tests }}"
        echo "‚ö†Ô∏è WARNING: Publishing to PyPI - this will be publicly available!"
        echo "Make sure you have tested thoroughly before publishing."

  validate:
    needs: validate-inputs
    runs-on: ubuntu-latest
    if: ${{ !needs.validate-inputs.outputs.skip-tests }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,excel,hf]
    
    - name: Run linting
      run: |
        ruff check .
        black --check .
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=data4ai --cov-report=xml --cov-report=term
    
    - name: Check version
      run: |
        python -c "
        import toml
        
        with open('pyproject.toml', 'r') as f:
            config = toml.load(f)
        
        current_version = config['project']['version']
        requested_version = '${{ needs.validate-inputs.outputs.version }}'
        
        print(f'Current version in pyproject.toml: {current_version}')
        
        if requested_version:
            print(f'Requested version: {requested_version}')
            if requested_version != current_version:
                print(f'‚ö†Ô∏è WARNING: Version mismatch!')
                print(f'   Current: {current_version}')
                print(f'   Requested: {requested_version}')
                print(f'   Make sure to update pyproject.toml before publishing!')
        else:
            print(f'Using current version: {current_version}')
        "

  build:
    needs: [validate-inputs, validate]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Validate package metadata
      run: |
        python -c "
        import subprocess
        import sys
        import glob
        
        # Check package with twine
        result = subprocess.run(['python', '-m', 'twine', 'check', 'dist/*'], 
                              capture_output=True, text=True)
        
        if result.returncode != 0:
            print('‚ùå Package validation failed:')
            print(result.stderr)
            sys.exit(1)
        
        print('‚úÖ Package validation passed')
        
        # Check if wheel was created
        wheels = glob.glob('dist/*.whl')
        if not wheels:
            print('‚ùå No wheel file found')
            sys.exit(1)
        
        print(f'‚úÖ Found wheel: {wheels[0]}')
        
        # Show package info
        import toml
        with open('pyproject.toml', 'r') as f:
            config = toml.load(f)
        
        print(f'üì¶ Package: {config[\"project\"][\"name\"]}')
        print(f'üìã Version: {config[\"project\"][\"version\"]}')
        print(f'üìù Description: {config[\"project\"][\"description\"]}')
        "
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  test-installation:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ !needs.validate-inputs.outputs.skip-tests }}
    strategy:
      matrix:
        python-version: ['3.11']
        install-type: ['basic', 'all']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Install package
      run: |
        if [ "${{ matrix.install-type }}" = "basic" ]; then
          pip install dist/*.whl
        else
          pip install "dist/*.whl[all]"
        fi
    
    - name: Test import
      run: |
        python -c "from data4ai import __version__; print(f'Version: {__version__}')"
        python -c "from data4ai import DatasetGenerator"
        python -c "from data4ai.cli import app; print('CLI app loaded successfully')"
    
    - name: Test CLI
      run: |
        data4ai version
        data4ai --help



  publish-pypi:
    needs: [validate-inputs, build, test-installation]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: ${{ !needs.validate-inputs.outputs.force }}
    
    - name: Verify PyPI upload
      run: |
        echo "‚úÖ Package published to PyPI successfully!"
        echo "üîó Check: https://pypi.org/project/data4ai/"
        echo "üì¶ Package: data4ai"
        
        # Show installation instructions
        echo ""
        echo "üìã Installation:"
        echo "pip install data4ai"
        
        # Show optional dependencies
        echo ""
        echo "üìã Optional dependencies:"
        echo "pip install data4ai[excel]  # With Excel support"
        echo "pip install data4ai[hf]     # With HuggingFace support"
        echo "pip install data4ai[all]    # With all features"
    
    - name: Create GitHub Release
      if: ${{ !needs.validate-inputs.outputs.force }}
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        fail_on_unmatched_files: true
        tag_name: v${{ needs.validate-inputs.outputs.version || '0.1.1' }}
        name: Release v${{ needs.validate-inputs.outputs.version || '0.1.1' }}
        body: |
          ## üöÄ Release v${{ needs.validate-inputs.outputs.version || '0.1.1' }}
          
          ### üì¶ Package
          - **Name**: data4ai
          - **Version**: v${{ needs.validate-inputs.outputs.version || '0.1.1' }}
          - **PyPI**: https://pypi.org/project/data4ai/
          
          ### üîß Installation
          ```bash
          pip install data4ai
          ```
          
          ### üìã Optional Dependencies
          ```bash
          pip install data4ai[excel]  # With Excel support
          pip install data4ai[hf]     # With HuggingFace support
          pip install data4ai[all]    # With all features
          ```
          
          ### üìã What's New
          Check the [CHANGELOG.md](https://github.com/zysec/data4ai/blob/main/CHANGELOG.md) for detailed changes.
          
          ### üêõ Issues
          If you encounter any issues, please [report them](https://github.com/zysec/data4ai/issues).
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Manual PyPI Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.2) - leave empty to use current version'
        required: false
        default: ''
      force:
        description: 'Force publish even if version already exists'
        required: false
        default: false
        type: boolean
      skip-tests:
        description: 'Skip running tests before publishing'
        required: false
        default: false
        type: boolean

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ github.event.inputs.version }}
      force: ${{ github.event.inputs.force }}
      skip-tests: ${{ github.event.inputs.skip-tests }}
    steps:
    - name: Validate inputs
      run: |
        echo "Version: ${{ github.event.inputs.version }}"
        echo "Force: ${{ github.event.inputs.force }}"
        echo "Skip tests: ${{ github.event.inputs.skip-tests }}"
        echo "‚ö†Ô∏è WARNING: Publishing to PyPI - this will be publicly available!"
        echo "Make sure you have tested thoroughly before publishing."
        
        if [ "${{ github.event.inputs.skip-tests }}" = "true" ]; then
          echo "üîç NOTE: Tests will be skipped due to skip-tests=true"
        else
          echo "üîç NOTE: Tests will run (skip-tests=false)"
        fi

  validate:
    needs: validate-inputs
    runs-on: ubuntu-latest
    if: ${{ !needs.validate-inputs.outputs.skip-tests }}
    continue-on-error: false
    steps:
    - name: Check validate conditions
      run: |
        echo "üîç Validate Job Conditions:"
        echo "  - skip-tests: ${{ needs.validate-inputs.outputs.skip-tests }}"
        echo "  - Condition met: ${{ !needs.validate-inputs.outputs.skip-tests }}"
        
        if [ "${{ needs.validate-inputs.outputs.skip-tests }}" = "true" ]; then
          echo "‚è≠Ô∏è Skipping validation due to skip-tests=true"
        else
          echo "‚úÖ Running validation (skip-tests=false)"
        fi
    
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
        timeout-minutes: 10
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,excel,hf]
    
    - name: Run linting
      run: |
        ruff check .
        black --check .
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=data4ai --cov-report=xml --cov-report=term
    
    - name: Check version
      run: |
        python -c "
        import re
        
        # Read pyproject.toml and extract version
        with open('pyproject.toml', 'r') as f:
            content = f.read()
        
        # Find version using regex
        version_match = re.search(r'version\s*=\s*[\"\\']([^\"\\']+)[\"\\']', content)
        if version_match:
            current_version = version_match.group(1)
        else:
            print('‚ùå Could not find version in pyproject.toml')
            exit(1)
        
        requested_version = '${{ needs.validate-inputs.outputs.version }}'
        
        print(f'Current version in pyproject.toml: {current_version}')
        
        if requested_version:
            print(f'Requested version: {requested_version}')
            if requested_version != current_version:
                print(f'‚ö†Ô∏è WARNING: Version mismatch!')
                print(f'   Current: {current_version}')
                print(f'   Requested: {requested_version}')
                print(f'   Make sure to update pyproject.toml before publishing!')
        else:
            print(f'Using current version: {current_version}')
        "

  build:
    needs: [validate-inputs, validate]
    runs-on: ubuntu-latest
    if: needs.validate-inputs.result == 'success' && (needs.validate.result == 'success' || needs.validate.result == 'skipped')
    steps:
    - name: Check build conditions
      run: |
        echo "üîç Build Job Conditions:"
        echo "  - validate-inputs.result: ${{ needs.validate-inputs.result }}"
        echo "  - validate.result: ${{ needs.validate.result }}"
        echo "  - Condition met: ${{ needs.validate-inputs.result == 'success' && (needs.validate.result == 'success' || needs.validate.result == 'skipped') }}"
        
        if [ "${{ needs.validate-inputs.result }}" != "success" ]; then
          echo "‚è≠Ô∏è Skipping build due to validate-inputs failure"
        elif [ "${{ needs.validate.result }}" != "success" ] && [ "${{ needs.validate.result }}" != "skipped" ]; then
          echo "‚è≠Ô∏è Skipping build due to validate failure"
        else
          echo "‚úÖ Running build (all conditions met)"
        fi
    
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Validate package metadata
      run: |
        python -c "
        import subprocess
        import sys
        import glob
        
        # Check package with twine
        result = subprocess.run(['python', '-m', 'twine', 'check', 'dist/*'], 
                              capture_output=True, text=True)
        
        if result.returncode != 0:
            print('‚ùå Package validation failed:')
            print(result.stderr)
            sys.exit(1)
        
        print('‚úÖ Package validation passed')
        
        # Check if wheel was created
        wheels = glob.glob('dist/*.whl')
        if not wheels:
            print('‚ùå No wheel file found')
            sys.exit(1)
        
        print(f'‚úÖ Found wheel: {wheels[0]}')
        
        # Show package info
        import re
        with open('pyproject.toml', 'r') as f:
            content = f.read()
        
        # Extract package info using regex
        name_match = re.search(r'name\s*=\s*[\"\\']([^\"\\']+)[\"\\']', content)
        version_match = re.search(r'version\s*=\s*[\"\\']([^\"\\']+)[\"\\']', content)
        description_match = re.search(r'description\s*=\s*[\"\\']([^\"\\']+)[\"\\']', content)
        
        package_name = name_match.group(1) if name_match else 'unknown'
        package_version = version_match.group(1) if version_match else 'unknown'
        package_description = description_match.group(1) if description_match else 'No description'
        
        print(f'üì¶ Package: {package_name}')
        print(f'üìã Version: {package_version}')
        print(f'üìù Description: {package_description}')
        "
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  test-installation:
    needs: [validate-inputs, build]
    runs-on: ubuntu-latest
    if: ${{ !needs.validate-inputs.outputs.skip-tests && needs.build.result == 'success' }}
    strategy:
      matrix:
        python-version: ['3.11']
        install-type: ['basic', 'all']
    
    steps:
    - name: Check test-installation conditions
      run: |
        echo "üîç Test Installation Job Conditions:"
        echo "  - skip-tests: ${{ needs.validate-inputs.outputs.skip-tests }}"
        echo "  - build.result: ${{ needs.build.result }}"
        echo "  - Condition met: ${{ !needs.validate-inputs.outputs.skip-tests && needs.build.result == 'success' }}"
        
        if [ "${{ needs.validate-inputs.outputs.skip-tests }}" = "true" ]; then
          echo "‚è≠Ô∏è Skipping tests due to skip-tests=true"
        elif [ "${{ needs.build.result }}" != "success" ]; then
          echo "‚è≠Ô∏è Skipping tests due to build failure"
        else
          echo "‚úÖ Running tests (all conditions met)"
        fi
    
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
        timeout-minutes: 10
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Install package
      run: |
        echo "Installing package with type: ${{ matrix.install-type }}"
        
        # Find the wheel file
        WHEEL_FILE=$(find dist -name "*.whl" | head -1)
        if [ -z "$WHEEL_FILE" ]; then
          echo "‚ùå No wheel file found in dist/"
          exit 1
        fi
        echo "Found wheel file: $WHEEL_FILE"
        
        if [ "${{ matrix.install-type }}" = "basic" ]; then
          echo "Installing basic package..."
          pip install "$WHEEL_FILE"
        else
          echo "Installing package with extras: ${{ matrix.install-type }}"
          pip install "$WHEEL_FILE[${{ matrix.install-type }}]"
        fi
    
    - name: Test import
      run: |
        python -c "from data4ai import __version__; print(f'Version: {__version__}')"
        python -c "from data4ai import DatasetGenerator"
        python -c "from data4ai.cli import app; print('CLI app loaded successfully')"
    
    - name: Test CLI
      run: |
        data4ai version
        data4ai --help
    
    - name: Test Excel functionality
      if: matrix.install-type == 'all'
      run: |
        python -c "from data4ai.excel_handler import ExcelHandler; print('Excel handler imported successfully')"
    
    - name: Test HF functionality
      if: matrix.install-type == 'all'
      run: |
        python -c "from data4ai.publisher import HuggingFacePublisher; print('HF publisher imported successfully')"



  publish-pypi:
    needs: [validate-inputs, build]
    runs-on: ubuntu-latest
    if: needs.validate-inputs.result == 'success' && needs.build.result == 'success'
    
    steps:
    - name: Check publish conditions
      run: |
        echo "üîç Publish Job Conditions:"
        echo "  - validate-inputs.result: ${{ needs.validate-inputs.result }}"
        echo "  - build.result: ${{ needs.build.result }}"
        echo "  - Condition met: ${{ needs.validate-inputs.result == 'success' && needs.build.result == 'success' }}"
        
        if [ "${{ needs.validate-inputs.result }}" != "success" ]; then
          echo "‚è≠Ô∏è Skipping publish due to validate-inputs failure"
        elif [ "${{ needs.build.result }}" != "success" ]; then
          echo "‚è≠Ô∏è Skipping publish due to build failure"
        else
          echo "‚úÖ Running publish (all conditions met)"
        fi
    - name: Check job status
      run: |
        echo "üîç Job Status Summary:"
        echo "  - validate-inputs: ${{ needs.validate-inputs.result }}"
        echo "  - validate: ${{ needs.validate.result }}"
        echo "  - build: ${{ needs.build.result }}"
        echo "  - test-installation: ${{ needs.test-installation.result || 'skipped' }}"
        
        if [ "${{ github.event.inputs.skip-tests }}" = "true" ]; then
          echo "‚úÖ Tests were intentionally skipped (skip-tests=true)"
        else
          echo "‚úÖ Tests should have run (skip-tests=false)"
        fi
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: ${{ !needs.validate-inputs.outputs.force }}
    
    - name: Verify PyPI upload
      run: |
        echo "‚úÖ Package published to PyPI successfully!"
        echo "üîó Check: https://pypi.org/project/data4ai/"
        echo "üì¶ Package: data4ai"
        
        # Show installation instructions
        echo ""
        echo "üìã Installation:"
        echo "pip install data4ai"
        
        # Show optional dependencies
        echo ""
        echo "üìã Optional dependencies:"
        echo "pip install data4ai[excel]  # With Excel support"
        echo "pip install data4ai[hf]     # With HuggingFace support"
        echo "pip install data4ai[all]    # With all features"
    
    - name: Create GitHub Release
      if: ${{ !needs.validate-inputs.outputs.force }}
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        fail_on_unmatched_files: true
        tag_name: v${{ needs.validate-inputs.outputs.version || '0.1.1' }}
        name: Release v${{ needs.validate-inputs.outputs.version || '0.1.1' }}
        body: |
          ## üöÄ Release v${{ needs.validate-inputs.outputs.version || '0.1.1' }}
          
          ### üì¶ Package
          - **Name**: data4ai
          - **Version**: v${{ needs.validate-inputs.outputs.version || '0.1.1' }}
          - **PyPI**: https://pypi.org/project/data4ai/
          
          ### üîß Installation
          ```bash
          pip install data4ai
          ```
          
          ### üìã Optional Dependencies
          ```bash
          pip install data4ai[excel]  # With Excel support
          pip install data4ai[hf]     # With HuggingFace support
          pip install data4ai[all]    # With all features
          ```
          
          ### üìã What's New
          Check the [CHANGELOG.md](https://github.com/zysec/data4ai/blob/main/CHANGELOG.md) for detailed changes.
          
          ### üêõ Issues
          If you encounter any issues, please [report them](https://github.com/zysec/data4ai/issues).
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

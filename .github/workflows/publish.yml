name: Publish to PyPI

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.2)'
        required: false
        default: ''

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,excel,hf]
    
    - name: Run linting
      run: |
        ruff check .
        black --check .
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=data4ai --cov-report=xml --cov-report=term
    
    - name: Check version consistency
      run: |
        python -c "
        import re
        
        # Read pyproject.toml and extract version
        with open('pyproject.toml', 'r') as f:
            content = f.read()
        
        # Find version using regex
        version_match = re.search(r'version\s*=\s*[\"\\']([^\"\\']+)[\"\\']', content)
        if version_match:
            version = version_match.group(1)
        else:
            print('‚ùå Could not find version in pyproject.toml')
            exit(1)
        
        print(f'Package version: {version}')
        
        # Check if version matches tag (if this is a tag push)
        if '${{ github.ref_type }}' == 'tag':
            tag_version = '${{ github.ref_name }}'.lstrip('v')
            if version != tag_version:
                print(f'ERROR: Version mismatch! Package version: {version}, Tag version: {tag_version}')
                exit(1)
            else:
                print(f'‚úÖ Version consistency check passed: {version}')
        else:
            print('‚ÑπÔ∏è Not a tag push, skipping version consistency check')
        "

  build:
    needs: validate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Validate package metadata
      run: |
        python -c "
        import json
        import subprocess
        import sys
        
        # Get package info
        result = subprocess.run(['python', '-m', 'twine', 'check', 'dist/*'], 
                              capture_output=True, text=True)
        
        if result.returncode != 0:
            print('‚ùå Package validation failed:')
            print(result.stderr)
            sys.exit(1)
        
        print('‚úÖ Package validation passed')
        
        # Check if wheel was created
        import glob
        wheels = glob.glob('dist/*.whl')
        if not wheels:
            print('‚ùå No wheel file found')
            sys.exit(1)
        
        print(f'‚úÖ Found wheel: {wheels[0]}')
        "
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  test-installation:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        install-type: ['basic', 'excel', 'hf', 'all']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Install package
      run: |
        if [ "${{ matrix.install-type }}" = "basic" ]; then
          pip install dist/*.whl
        elif [ "${{ matrix.install-type }}" = "excel" ]; then
          pip install "dist/*.whl[excel]"
        elif [ "${{ matrix.install-type }}" = "hf" ]; then
          pip install "dist/*.whl[hf]"
        elif [ "${{ matrix.install-type }}" = "all" ]; then
          pip install "dist/*.whl[all]"
        fi
    
    - name: Test import
      run: |
        python -c "from data4ai import __version__; print(f'Version: {__version__}')"
        python -c "from data4ai import DatasetGenerator"
        python -c "from data4ai.cli import app; print('CLI app loaded successfully')"
    
    - name: Test CLI
      run: |
        data4ai version
        data4ai --help
        data4ai config --help
    
    - name: Test Excel functionality
      if: matrix.install-type == 'excel' || matrix.install-type == 'all'
      run: |
        python -c "from data4ai.excel_handler import ExcelHandler; print('Excel handler imported successfully')"
    
    - name: Test HF functionality
      if: matrix.install-type == 'hf' || matrix.install-type == 'all'
      run: |
        python -c "from data4ai.publisher import HuggingFacePublisher; print('HF publisher imported successfully')"



  publish-pypi:
    needs: test-installation
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true
    
    - name: Verify PyPI upload
      run: |
        echo "‚úÖ Package published to PyPI successfully!"
        echo "üîó Check: https://pypi.org/project/data4ai/"
        echo "üì¶ Package: data4ai"
    
    - name: Create GitHub Release Assets
      if: github.event_name == 'push'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        fail_on_unmatched_files: true
        body: |
          ## üöÄ Release ${{ github.ref_name }}
          
          ### üì¶ Package
          - **Name**: data4ai
          - **Version**: ${{ github.ref_name }}
          - **PyPI**: https://pypi.org/project/data4ai/
          
          ### üîß Installation
          ```bash
          pip install data4ai
          ```
          
          ### üìã What's New
          Check the [CHANGELOG.md](https://github.com/zysec/data4ai/blob/main/CHANGELOG.md) for detailed changes.
          
          ### üêõ Issues
          If you encounter any issues, please [report them](https://github.com/zysec/data4ai/issues).
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}